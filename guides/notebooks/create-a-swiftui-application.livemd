# Create a SwiftUI Application

```elixir
Mix.install(
  [
    {:kino_live_view_native, github: "liveview-native/kino_live_view_native"}
  ],
  config: [
    live_view_native: [plugins: [LiveViewNativeSwiftUi]]
  ]
)

KinoLiveViewNative.start([])
```

## Overview

In this guide, we'll walk through how to manually setup a SwiftUI Application for LiveViewNative.

For existing Phoenix projects, it's simpler to use the `mix lvn.install` command as described in the [Installation Guide](https://hexdocs.pm/live_view_native/installation.html#5-enable-liveview-native) in an existing Phoenix project to create a new IOS application and configure the Phoenix project for LiveView Native.

However, we're going to walk through the steps of manually setting up an Xcode IOS project to better understand how the IOS side of a LiveView Native application works.

In future lessons, we'll use this IOS application to view IOS examples in the Xcode simulator (or a physical device if you prefer.)

## Prerequisites

First, make sure you have followed the [Getting Started](./getting_started.livemd) guide. Then evaluate the smart cell below and visit http://localhost:4000 to ensure the Phoenix server is running properly. You should see the text `Hello from LiveView!`

<!-- livebook:{"attrs":{"action":":index","code":"defmodule MyApp.HomeLive do\n  use Phoenix.LiveView\n  use LiveViewNative.LiveView\n\n  @impl true\n  def render(%{platform_id: :swiftui} = assigns) do\n    ~SWIFTUI\"\"\"\n    <Text>\n      Hello again from LiveView Native!\n    </Text>\n    \"\"\"\n  end\n  \n  def render(assigns) do\n    ~H\"\"\"\n    <div>Hello from LiveView!</div>\n    \"\"\"\n  end\nend","path":"/"},"chunks":[[0,109],[111,331],[444,45],[491,49]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule MyApp.HomeLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text>
      Hello again from LiveView Native!
    </Text>
    """
  end

  def render(assigns) do
    ~H"""
    <div>Hello from LiveView!</div>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
:ok
```

## Create the IOS Application

Open XCode and select Create New Project new project.

<!-- livebook:{"break_markdown":true} -->

![XCode Create New Project](https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-create-new-project.png?raw=true)

<!-- livebook:{"break_markdown":true} -->

Select the `iOS` and `App` options to create an iOS application. Then click `Next`.

<!-- livebook:{"break_markdown":true} -->

![Xcode Create Template For New Project](https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-create-template-for-new-project.png?raw=true)

<!-- livebook:{"break_markdown":true} -->

Choose options for your new project that match the following image then click `Next`.

* **Product Name:** The name of the application. This can be any valid name. We've chosen `Guides`.
* **Organization Identifier:** A reverse DNS string that uniquely identifies your organization. If you don't have a company identifier, [Apple recomends](https://developer.apple.com/documentation/xcode/creating-an-xcode-project-for-an-app) using `com.example.your_name` where `your_name` is your organization or personal name.
* **Interface:**: Xcode generates an interface file that includes all your source code's internal and public declarations when using the Assistant editor, the Related Items, or the Navigate menu. Select `SwiftUI` since we're building a SwiftUI application.
* **Language:** Determines which language Xcode should use for the project. Select `Swift`.

Including Tests is optional, but it's enabled by default so we've left the setting as-is.

<!-- livebook:{"break_markdown":true} -->

![Xcode Choose Options For Your New Project](https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-choose-options-for-your-new-project.png?raw=true)

<!-- livebook:{"break_markdown":true} -->

Select an appropriate folder location where you would like to store the iOS project, then click `Create`.

<!-- livebook:{"break_markdown":true} -->

![Xcode select folder location](https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-select-folder-location.png?raw=true)

## Add the LiveView Client SwiftUI Package

To add the `liveview-client-swiftui` package to the iOS application, select `File -> Add Package Dependencies`. Then, search for `liveview-client-swiftui`. Once you have selected the package, click `Add Package`.

<!-- livebook:{"break_markdown":true} -->

![](https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-select-liveview-client-swiftui-package.png?raw=true)

<!-- livebook:{"break_markdown":true} -->

Choose the Package Products for `liveview-client-swiftui`. Select the iOS application we've already built for the `LiveViewNative` target.

<!-- livebook:{"break_markdown":true} -->

![](https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-choose-package-products-for-liveview-client-swiftui.png?raw=true)

<!-- livebook:{"break_markdown":true} -->

If the following prompt appears, select `Trust & Enable All` to enable the `liveview-client-swiftui` package we just added.

<!-- livebook:{"break_markdown":true} -->

![Xcode some build plugins are disabled](https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-some-build-plugins-are-disabled.png?raw=true)

## Setup the LiveSessionCoordinator and SwiftUI LiveView

The [ContentView](https://developer.apple.com/tutorials/swiftui-concepts/exploring-the-structure-of-a-swiftui-app#Content-view) contains the main view of our iOS application. We need to establish a connection between the SwiftUI application and the Phoenix application in this file.

Replace the code in the `ContentView` file with the following.

<!-- livebook:{"break_markdown":true} -->

```swift
import SwiftUI
import LiveViewNative

struct ContentView: View {
    @StateObject private var coordinator = LiveSessionCoordinator(
        {
            let prodURL = Bundle.main.object(forInfoDictionaryKey: "Phoenix Production URL") as? String

            #if DEBUG
            return URL(string: "http://localhost:4000")!
            #else
            return URL(string: URL || "https://example.com")!
            #endif
        }(),
        config: LiveSessionConfiguration(navigationMode: .replaceOnly)
    )
    
    var body: some View {
        LiveView(session: coordinator)
    }
}
```

<!-- livebook:{"break_markdown":true} -->

The code above sets up a [LiveSessionCoordinator](https://liveview-native.github.io/liveview-client-swiftui/documentation/liveviewnative/livesessioncoordinator) which is session coordinator object that handles the initial connection and navigation on the iOS app. We also create a SwiftUI [LiveView](https://liveview-native.github.io/liveview-client-swiftui/documentation/liveviewnative/liveview), which is the SwiftUI root view for a Phoenix LiveView.

The SwiftUI [LiveView](https://liveview-native.github.io/liveview-client-swiftui/documentation/liveviewnative/liveview) uses the [LiveSessionCoordinator](https://liveview-native.github.io/liveview-client-swiftui/documentation/liveviewnative/livesessioncoordinator) and our SwiftUI application connects to the Phoenix application on a given URL. By default, the iOS application connects to a Phoenix application on http://localhost:4000.

<!-- livebook:{"break_markdown":true} -->

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

```mermaid
graph LR;
  subgraph I[iOS App]
   direction TB
   ContentView
   SL[SwiftUI LiveView]
   SC[LiveSessionCoordinator]
  end
  subgraph P[Phoenix App]
    LiveView
  end
  I --> P
  ContentView --> SL
     ContentView --> SC

  
```

<!-- livebook:{"break_markdown":true} -->

To avoid any potential confusion with the step above, here's how our `ContentView` should look in Xcode.

<!-- livebook:{"break_markdown":true} -->

![](https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-replace-content-view.png?raw=true)

## Start the Active Scheme

Click the `start active scheme` button <i class="ri-play-fill"></i> to build the project and run it on the iOS simulator.

> A [build scheme](https://developer.apple.com/documentation/xcode/build-system) contains a list of targets to build, and any configuration and environment details that affect the selected action. For example, when you build and run an app, the scheme tells Xcode what launch arguments to pass to the app.
> 
> * https://developer.apple.com/documentation/xcode/build-system

You may encounter an issue with `LiveViewNativeMacros`. If you do, click on the error in the error panel as seen in the image below and you should see the following prompt. Select `Trust & Enable` to resolve the issue.

<!-- livebook:{"break_markdown":true} -->

![](https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-live-view-native-macros-was-disabled.png?raw=true)

<!-- livebook:{"break_markdown":true} -->

The iOS Xcode simulator should start. If at this point you get a `No Connection` error, make sure you have followed the [Prerequisites](#prerequisites) steps at the beginning of this guide.

<!-- livebook:{"break_markdown":true} -->

<div style="height: 800; width: 100%; display: flex; height: 800px; justify-content: center; align-items: center;">
<img style="width: 100%; height: 100%; object-fit: contain" src="https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-ios-simulator-no-connection.png?raw=true"/>
</div>

<!-- livebook:{"break_markdown":true} -->

After you start the active scheme, the simulator should open the iOS application and display `Hello from LiveView Native!`.

<!-- livebook:{"break_markdown":true} -->

<div style="height: 800; width: 100%; display: flex; height: 800px; justify-content: center; align-items: center;">
<img style="width: 100%; height: 100%; object-fit: contain" src="https://github.com/BrooklinJazz/live_view_native_assets/blob/main/xcode-hello-from-liveview-native.png?raw=true"/>
</div>

## Live Reloading

LiveView Native implements live reloading whenever changes are made to the Phoenix application.

Run the following smart cell and you should see the Xcode simulator update automatically to display `Hello again from LiveView Native!`

<!-- livebook:{"attrs":{"action":":index","code":"defmodule MyApp.HomeLive do\n  use Phoenix.LiveView\n  use LiveViewNative.LiveView\n\n  @impl true\n  def render(%{platform_id: :swiftui} = assigns) do\n    ~SWIFTUI\"\"\"\n    <Text>\n      Hello again from LiveView Native!\n    </Text>\n    \"\"\"\n  end\n\n  def render(assigns) do\n    ~H\"\"\"\n    <div>Hello again from LiveView!</div>\n    \"\"\"\n  end\nend","path":"/"},"chunks":[[0,109],[111,335],[448,45],[495,49]],"kind":"Elixir.KinoLiveViewNative","livebook_object":"smart_cell"} -->

```elixir
require KinoLiveViewNative.Livebook
import KinoLiveViewNative.Livebook
import Kernel, except: [defmodule: 2]

defmodule MyApp.HomeLive do
  use Phoenix.LiveView
  use LiveViewNative.LiveView

  @impl true
  def render(%{platform_id: :swiftui} = assigns) do
    ~SWIFTUI"""
    <Text>
      Hello again from LiveView Native!
    </Text>
    """
  end

  def render(assigns) do
    ~H"""
    <div>Hello again from LiveView!</div>
    """
  end
end
|> KinoLiveViewNative.register("/", ":index")

import KinoLiveViewNative.Livebook, only: []
:ok
```

## Troubleshooting

If you encountered any issues with the native application, here are some common troubleshooting steps you can use:

* **Reset Package Caches:** In the Xcode application go to `File -> Packages -> Reset Package Caches`.
* **Update Packages:** In the Xcode application go to `File -> Packages -> Update to Latest Package Versions`.
* **Rebuild the Active Scheme**: In the Xcode application, press the `start active scheme` button <i class="ri-play-fill"></i> to rebuild the active scheme and run it on the Xcode simulator.
* Update your [XCode](https://developer.apple.com/xcode/) version if it is not already the latest version
* Ensure that the Livebook smart cells in this Notebook evaluate with `:ok`.

You can also [raise an issue](https://github.com/BrooklinJazz/liveview_native_guides/issues/new) if you would like support from the LiveView Native team.

## Navigation

<div style="display: flex; align-items: center; width: 100%; justify-content: space-between; font-size: 1rem; color: #61758a; background-color: #f0f5f9; height: 4rem; padding: 0 1rem; border-radius: 1rem;">
<div style="display: flex; margin-right: auto;">
<i class="ri-arrow-left-fill"></i>
<a style="display: flex; color: #61758a; margin-left: 1rem;" href="https://livebook.dev/run?url=https%3A%2F%2Fhexdocs.pm%2Flive_view_native%2F0.1.2%2Fgetting-started.livemd">Getting Started</a>
</div>
<div style="display: flex; margin-left: auto;">
<span style="display: flex; color: #61758a; margin-right: 1rem;">Coming Soon</span>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
